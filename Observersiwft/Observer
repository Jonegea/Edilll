import UIKit

protocol Bidder {
    var id: Int {get}
    func update(bid : Float)
}

class Auctioneer {
    var bidders = [Bidder]()

    func receiveBid (bid: Float) {
        notifyBidder(bid: bid)
    }
    
    func register(bidder: Bidder){
        bidders.append(bidder)
    }
    
    func notifyBidder(bid: Float){
        for bidder in bidders {
            bidder.update(bid: bid)
        }
    }
    
    func deregister(bidder: Bidder) {
        if let toRemove = bidders.enumerated().first(where: { $0.element.id == bidder.id })
        {
            bidders.remove(at: toRemove.offset)
        }
    }
}


class OnlineBidder : Bidder {
    var id: Int
    
    private var subject : Auctioneer
    init(subject : Auctioneer, id: Int) {
        self.id = id
        self.subject = subject
        self.subject.register(bidder: self)

    }
    func update(bid: Float) {
        // business logic to decide whether to increase bid, and press the computer
        print ("Decide whether to update")
        print ("Type increased bid which would be greater than > \(bid)")
    }
}

class InpersonBidder : Bidder {
    var id: Int

    private var subject : Auctioneer
    init(subject : Auctioneer, id: Int) {
        self.id = id
        self.subject = subject
        self.subject.register(bidder: self)
        
    }
    func update(bid: Float) {
        // business logic to decide whether to increase bid, and bid again in the room
        print ("Decide whether to update")
        print ("Present bid sign which would be greater than> \(bid)")
    }
}

let auctioneer = Auctioneer()
let bidder1 = OnlineBidder(subject: auctioneer, id: 1)
let bidder2 = InpersonBidder(subject: auctioneer, id: 2)
auctioneer.receiveBid(bid: 10.01)